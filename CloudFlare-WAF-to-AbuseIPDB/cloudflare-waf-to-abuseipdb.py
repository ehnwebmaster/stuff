import json
import requests
import time
import os
import yaml
import sys

def load_config(path):
  f = open(path, 'r', encoding='utf-8')
  ystr = f.read()
  ymllist = yaml.load(ystr, Loader=yaml.FullLoader)
  return ymllist

if os.path.exists('config.yml'):
  c=load_config('config.yml')
  CLOUDFLARE_ZONE_ID = c['CLOUDFLARE_ZONE_ID']
  CLOUDFLARE_EMAIL = c['CLOUDFLARE_EMAIL']
  CLOUDFLARE_API_KEY = c['CLOUDFLARE_API_KEY']
  ABUSEIPDB_API_KEY = c['ABUSEIPDB_API_KEY']
else:
  CLOUDFLARE_ZONE_ID = sys.argv[1]
  CLOUDFLARE_EMAIL = sys.argv[2]
  CLOUDFLARE_API_KEY = sys.argv[3]
  ABUSEIPDB_API_KEY = sys.argv[4]

# cada 2h30m
rangeFrom = time.localtime(time.time()-60*60*2.5)
rangeUntil = time.localtime(time.time())

# campos
# https://community.cloudflare.com/t/graphql-firewall-events-available-fields/357030

PAYLOAD={
  "query": """query ListFirewallEvents($zoneTag: string, $filter: FirewallEventsAdaptiveFilter_InputObject) {
    viewer {
      zones(filter: { zoneTag: $zoneTag }) {
        firewallEventsAdaptive(
          filter: $filter
          limit: 1500
          orderBy: [datetime_DESC]
        ) {
          action
          clientASNDescription
          clientCountryName
          clientIP
          clientRequestHTTPHost
          clientRequestHTTPMethodName
          clientRequestPath
          clientRequestQuery
          datetime
          source
          ruleId
          userAgent
        }
      }
    }
  }""",
  "variables": {
    "zoneTag": CLOUDFLARE_ZONE_ID,
    "filter": {
      "datetime_geq": time.strftime("%Y-%m-%dT%H:%M:%SZ", rangeFrom),
      "datetime_leq": time.strftime("%Y-%m-%dT%H:%M:%SZ", rangeUntil),
      # "OR":[{"action": "block"}, {"action": "managed_challenge"}, {"action": "jschallenge"}, {"action": "log"}],
      "AND":[
          {"action_neq": "allow"},
          {"action_neq": "skip"},
          {"action_neq": "challenge_solved"},
          {"action_neq": "challenge_failed"},
          {"action_neq": "challenge_bypassed"},
          {"action_neq": "jschallenge_solved"},
          {"action_neq": "jschallenge_failed"},
          {"action_neq": "jschallenge_bypassed"},
          {"action_neq": "managed_challenge_skipped"},
          {"action_neq": "managed_challenge_non_interactive_solved"},
          {"action_neq": "managed_challenge_interactive_solved"},
          {"action_neq": "managed_challenge_bypassed"},
          {"source_neq": "firewallrules"},
          {"source_neq": "securitylevel"},
#         {"source_neq": "uablock"},
      ]
    }
  }
}
PAYLOAD = json.dumps(PAYLOAD)
headers={"Content-Type":"application/json","X-Auth-Key":CLOUDFLARE_API_KEY,"X-Auth-Email":CLOUDFLARE_EMAIL}

ttl=60
def get_blocked_ip():
  global ttl
  ttl=ttl-1
  print("ttl:",ttl)
  if ttl<=0:
    return []
  try:
    r=requests.post("https://api.cloudflare.com/client/v4/graphql/",headers=headers,data=PAYLOAD)
    if str(type(r.json())) == "<class 'NoneType'>":
      get_blocked_ip()
    else:
      return r.json()
  except Exception as e:
    get_blocked_ip()

def get_comment(it):
  return "Cloudflare WAF: Request Path: "+it['clientRequestPath']+" Request Query: "+it['clientRequestQuery']+" Host: "+it['clientRequestHTTPHost']+" userAgent: "+it['userAgent']+" Action: "+it['action']+" Source: "+it['source']+" ASN Description: "+it['clientASNDescription']+" Country: "+it['clientCountryName']+" Method: "+it['clientRequestHTTPMethodName']+" Timestamp: "+it['datetime']+" ruleId: "+it['ruleId']+". Report generated by Cloudflare-WAF-to-AbuseIPDB (https://github.com/MHG-LAB/Cloudflare-WAF-to-AbuseIPDB)."


def report_bad_ip(it):
  try:
    url = 'https://api.abuseipdb.com/api/v2/report'
    params = {
      'ip': it['clientIP'],
      'categories': '15,16,21',
      'comment': get_comment(it),
      'timestamp': it['datetime']
    }
    headers = {
      'Accept': 'application/json',
      'Key': ABUSEIPDB_API_KEY
    }
    r=requests.post(url=url, headers=headers, params=params)
    if r.status_code==200:
      print("reported:",it['clientIP'])
    else:
      print("error:",r.status_code)
    decodedResponse = json.loads(r.text)
    print(json.dumps(decodedResponse, sort_keys=True, indent=4))
  except Exception as e:
    print("error:",e)

# Define a list of excluded Cloudflare WAF Rule IDs


# Action: jschallenge Source: uablock
excepted_ruleId = ["637790dbd103454f8e4b720f9e9b4d53", "b70081ae0e664b7f97ae18a7c27d64e6", "ce11be543594412bb4bb92516aa0bef8", "bb11822de1384fd3ae780316c48963a4", "94143e6f2e4c46bd96996439b00f0512", "f58e736f78e848aab5ac74040c7e087c"]

#excepted_ruleId.append(["b70081ae0e664b7f97ae18a7c27d64e6"])
# abuse geolocalizador porngub
#excepted_ruleId = ["b70081ae0e664b7f97ae18a7c27d64e6"]
# Anomaly:Header:User-Agent - Fake Google Bot
# excepted_ruleId = ["ce11be543594412bb4bb92516aa0bef8"]
# Too much rule ID User Agent ese raro
# excepted_ruleId = ["bb11822de1384fd3ae780316c48963a4"]
# desactivar http/2
#excepted_ruleId = ["94143e6f2e4c46bd96996439b00f0512"]
# Listado proxys
#excepted_ruleId = ["f58e736f78e848aab5ac74040c7e087c"]


print("==================== Start ====================")
print("Events from:  " + str(time.strftime("%Y-%m-%d %H:%M:%S", rangeFrom)))
print("Events until: " + str(time.strftime("%Y-%m-%d %H:%M:%S", rangeUntil)))
a=get_blocked_ip()
print(str(type(a)))
if isinstance(a, dict) and len(a)>0:
  ip_bad_list=a["data"]["viewer"]["zones"][0]["firewallEventsAdaptive"]
  print(len(ip_bad_list))
  # print(a["data"]["viewer"]["zones"][0]["firewallEventsAdaptive"][0])
  # {'action': 'managed_challenge', 'clientASNDescription': 'BABBAR-AS', 'clientAsn': '210743', 'clientCountryName': 'FR', 'clientIP': '154.54.249.200', 'clientRequestHTTPHost': 'blog.mhuig.top', 'clientRequestHTTPMethodName': 'GET', 'clientRequestHTTPProtocol': 'HTTP/1.1', 'clientRequestPath': '/robots.txt', 'clientRequestQuery': '', 'datetime': '2022-04-20T13:06:49Z', 'rayName': '6fee19707fd03afb', 'ruleId': '8ef3496625dc456b899f3497ccedcd50', 'source': 'firewallrules', 'userAgent':'Mozilla/5.0 (compatible; Barkrowler/0.9; +https://babbar.tech/crawler)'}

  reported_ip_list=[]
  for i in ip_bad_list:
    if i['ruleId'] not in excepted_ruleId:
      if i['clientIP'] not in reported_ip_list:
        report_bad_ip(i)
        reported_ip_list.append(i['clientIP'])

  print(len(reported_ip_list))
print("==================== End ====================")